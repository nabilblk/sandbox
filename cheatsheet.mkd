# Branches

## List

    # local
    $ git branch -v

    # remote
    $ git branch -rv

## Switch to a branch

    $ git checkout <existing-branch-name>

## Create branches

    # local from current HEAD
    $ git checkout -b <new-branch-name>

    # local from arbitrary commit
    $ git checkout -b <new-branch-name> <commit-id>

    # add local branch to remote repo
    $ git push <remote> <new-branch-name>
    $ git branch <new-branch-name> --set-upstream <remote>/<new-branch-name>

    # add remote branch to local and track it
    $ git fetch <remote>
    $ git checkout -b <new-branch-name> <remote-repo>/<branch-name>

## Delete

    # local
    $ git -d <branch-name>

    # remote (like telling git to "push nothing to branch")
    $ git push origin :<remote-branch-name>

## Rename

    $ git -m <current-name> <new-name>

## Commits, log, diff

    # view last "n" logs in current branch
    $ git log -n

    # log on <branch-name> branch
    $ git log <branch-name>

    # Log on a 
    $ git log origin/foo
    $ git diff origin/HEAD

## Stashes

Temporary branches that are not meant to be kept for long or distributed. Git
can keep a stack of stashed changes. Stashed changes are not related to any
branch: you can stash a set of changes in branch foo and later apply them to
branch bar.

With a dirty working copy: 

    $ git stash
    # Stashes the current changes and checkouts the previous state
    # ...do something
    # retrieve the stashed changes and apply them to the working copy (without
    # deleting the stash)
    $ git stash apply

Stack manipulation:

    $ git stash list
    $ git stash show
    # remove a stashed change from the list
    $ git stash pop <stash-id>
    $ git stash clear

# History

Only rewrite history on changes that have not been shared. Do not use rebase
on commits that have been uploaded to a remote repo, or if other people are
pulling from your repo.

## Amend

The "amend" operator resets the previous commit and applies the changes to
your working tree. To change the commit message on the last commit:

    $ git commit --amend

or you can add a file after committing and then:

    $ git commit --amend

to merge that into the previous commit. You can use the `-a` flag to include
all of the pending changes in the previous commit.

## Rebase

To interactively edit the las 10 commits:

    $ git rebase -i HEAD~10

You can remove, edit the commit message, squash commits together, reorder
them, etc. Check `git help rebase` for instructions.

# Commits

With git you can carefully "prepare" or stage your commits before saving the
changes to the repo. To commit only certain changes in the same file:

    # will ask you if you want to add, once for each edit "block"
    $ git add -p

    # interactive, more complicated but more powerful
    $ git add -i

    # edit the patch file before adding it to the stage/index
    $ git add -e

Retrieving information about a commit:

    # Shows the commit message as well as a full diff.
    $ git show <commit-id>

Diff between two commits:

    $ git diff <older-commit-id> <more-recent-commit-id>
    # you can do this:
    $ git diff <commit-id>~4 <commit-id>
    # to get the diff between <commit-id> and the previous 4 commits.

# The index

Differences between the working copy and the last commit:

    $ git diff

Differences between the index (staged changes) and the last commit:

    $ git diff --cached
    # I prefer the 'staged' alias, it makes more sense.
    $ git diff --staged

Differences between the working tree and the index:

    $ git diff

# Maintenance

To clean your working tree:

    # removes untracked files and directories:
    $ git clean -f -d

    # and files ignored by .gitignore!
    $ git clean -x
